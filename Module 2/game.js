class Player{
    constructor(x, y){
        this.color = '#ff0000'
        this.height = 16
        this.width = 16
        this.jumping = true
        this.vel_x = 0
        this.vel_y = 0
        this.x = x
        this.y = y
    }

    jump(){
        if(!this.jumping){
            this.color = "#" + Math.floor(Math.random() * 16777216).toString(16);
            if (this.color.length != 7) {
                this.color = this.color.slice(0, 1) + "0" + this.color.slice(1, 6);
            }
            this.jumping = true
            this.vel_y -= 25
        }
    }

    moveLeft(){
        this.vel_x -= 0.5
    }

    moveRight(){
        this.vel_x += 0.5
    }

    update(){
        this.x += this.vel_x
        this.y += this.vel_y
    }

}

class World{
    
    constructor(){
        this.bgcolor = 'rgba(40,48,56,0.25)'
        this.friction = 0.9
        this.gravity = 3

        this.player = new Player(100, 50)

        this.columns = 27
        this.rows = 15
        this.map = [
            [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21],

            [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21],

            [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21],

            [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21],

            [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21],

            [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21],

            [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21],

            [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21],

            [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21],

            [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21],

            [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21],

            [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21],

            [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21], [3, 21],

            [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0],

            [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0],
        ]

        this.width = this.columns * 16
        this.height = this.rows * 16

    }

    collideObject(object){
        if(object.x < 0){
            object.x = 0
            object.vel_x = 0
        }
        else if(object.x + object.width > this.width - object.width){
            object.x = this.width - object.width*2
            object.vel_x = 0
        }
        if(object.y < 0){
            object.y = 0
            object.vel_y = 0
        }
        else if(object.y + object.height > this.height){
            object.jumping = false 
            object.y = this.height - object.height
            object.vel_y = 0
        }
    }

    update(){
        this.player.vel_y += this.gravity
        this.player.update()
        
        this.player.vel_x *= this.friction
        this.player.vel_y *= this.friction

        this.collideObject(this.player)
        
    }

}

export class Game{
    constructor(){
        this.world = new World()
    }

    update(){
        this.world.update()
    }

}